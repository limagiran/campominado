package com.limagiran.campominado.view;

import com.limagiran.campominado.control.Tiles;
import com.limagiran.campominado.settings.Settings.EnumMode;
import static com.limagiran.campominado.settings.Settings.EnumMode.*;
import static com.limagiran.campominado.settings.Settings.set;
import com.limagiran.campominado.util.Images;
import com.limagiran.digitalnumbersfont.DigitalNumbersFont;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.util.ResourceBundle;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import static java.lang.Integer.parseInt;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.TitledBorder;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 *
 * @author Vinicius Silva
 */
public class GamePlay extends JFrame {

    private Tiles tiles;
    private final DigitalNumbersFont bombs = new DigitalNumbersFont(40);
    private final DigitalNumbersFont time = new DigitalNumbersFont(40);
    private final JButton smile = new JButton(Images.SMILE);

    /**
     * Creates new form GamePlay
     */
    private GamePlay() {
        initComponents();
        init();
        newGame();
        refresh();
    }

    private void init() {
        bombs.set("000");
        time.set("000");
        jPanelSettings.add(bombs);
        jPanelSettings.add(smile);
        jPanelSettings.add(time);
        smile.setToolTipText(ResourceBundle
                .getBundle("com/limagiran/campominado/view/Bundle")
                .getString("GamePlay.smile.text"));
        smile.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                newGame();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogCustom = new JDialog();
        jPanelGeneral = new JPanel();
        jLabelHeight = new JLabel();
        jSpinnerHeight = new JSpinner();
        jLabelWidth = new JLabel();
        jSpinnerWidth = new JSpinner();
        jLabelBombs = new JLabel();
        jSpinnerBombs = new JSpinner();
        jButtonOK = new JButton();
        jButtonCancel = new JButton();
        buttonGroupGameMode = new ButtonGroup();
        jPanelSettings = new JPanel();
        jPanelGamePlay = new JPanel();
        jPanelGrid = new JPanel();
        jMenuBar = new JMenuBar();
        jMenuGame = new JMenu();
        jMenuItemNewGame = new JMenuItem();
        jSeparator1 = new JPopupMenu.Separator();
        jChkBxMenuItemEasy = new JCheckBoxMenuItem();
        jChkBxMenuItemMedium = new JCheckBoxMenuItem();
        jChkBxMenuItemHard = new JCheckBoxMenuItem();
        jChkBxMenuItemCustom = new JCheckBoxMenuItem();
        jSeparator2 = new JPopupMenu.Separator();
        jMenuItemRecords = new JMenuItem();
        jSeparator3 = new JPopupMenu.Separator();
        jMenuItemExit = new JMenuItem();
        jMenuHelp = new JMenu();
        jMenuItemHelp = new JMenuItem();
        jMenuItemSobre = new JMenuItem();

        jDialogCustom.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialogCustom.setModal(true);
        jDialogCustom.setResizable(false);
        jDialogCustom.setSize(new Dimension(276, 260));
        jDialogCustom.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                jDialogCustomWindowClosing(evt);
            }
        });
        jDialogCustom.getContentPane().setLayout(new AbsoluteLayout());

        ResourceBundle bundle = ResourceBundle.getBundle("com/limagiran/campominado/view/Bundle"); // NOI18N
        jPanelGeneral.setBorder(BorderFactory.createTitledBorder(null, bundle.getString("GamePlay.jPanelGeneral.border.title"), TitledBorder.CENTER, TitledBorder.TOP, new Font("Bookman Old Style", 0, 24))); // NOI18N
        jPanelGeneral.setLayout(new AbsoluteLayout());

        jLabelHeight.setFont(new Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabelHeight.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabelHeight.setText(bundle.getString("GamePlay.jLabelHeight.text")); // NOI18N
        jPanelGeneral.add(jLabelHeight, new AbsoluteConstraints(20, 50, 110, 30));

        jSpinnerHeight.setFont(new Font("Bookman Old Style", 0, 18)); // NOI18N
        jSpinnerHeight.setModel(new SpinnerNumberModel(10, 10, 30, 1));
        jSpinnerHeight.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                customKeyPressed(evt);
            }
        });
        jPanelGeneral.add(jSpinnerHeight, new AbsoluteConstraints(140, 50, 70, 30));

        jLabelWidth.setFont(new Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabelWidth.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabelWidth.setText(bundle.getString("GamePlay.jLabelWidth.text")); // NOI18N
        jPanelGeneral.add(jLabelWidth, new AbsoluteConstraints(20, 90, 110, 30));

        jSpinnerWidth.setFont(new Font("Bookman Old Style", 0, 18)); // NOI18N
        jSpinnerWidth.setModel(new SpinnerNumberModel(10, 10, 60, 1));
        jSpinnerWidth.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                customKeyPressed(evt);
            }
        });
        jPanelGeneral.add(jSpinnerWidth, new AbsoluteConstraints(140, 90, 70, 30));

        jLabelBombs.setFont(new Font("Bookman Old Style", 0, 18)); // NOI18N
        jLabelBombs.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabelBombs.setText(bundle.getString("GamePlay.jLabelBombs.text")); // NOI18N
        jPanelGeneral.add(jLabelBombs, new AbsoluteConstraints(20, 130, 110, 30));

        jSpinnerBombs.setFont(new Font("Bookman Old Style", 0, 18)); // NOI18N
        jSpinnerBombs.setModel(new SpinnerNumberModel(10, 10, 999, 1));
        jSpinnerBombs.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                customKeyPressed(evt);
            }
        });
        jPanelGeneral.add(jSpinnerBombs, new AbsoluteConstraints(140, 130, 70, 30));

        jButtonOK.setFont(new Font("Bookman Old Style", 0, 12)); // NOI18N
        jButtonOK.setText(bundle.getString("GamePlay.jButtonOK.text")); // NOI18N
        jButtonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        jButtonOK.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                customKeyPressed(evt);
            }
        });
        jPanelGeneral.add(jButtonOK, new AbsoluteConstraints(30, 180, 90, -1));

        jButtonCancel.setFont(new Font("Bookman Old Style", 0, 12)); // NOI18N
        jButtonCancel.setText(bundle.getString("GamePlay.jButtonCancel.text")); // NOI18N
        jButtonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        jButtonCancel.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                customKeyPressed(evt);
            }
        });
        jPanelGeneral.add(jButtonCancel, new AbsoluteConstraints(150, 180, 90, -1));

        jDialogCustom.getContentPane().add(jPanelGeneral, new AbsoluteConstraints(0, 0, 270, 230));

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanelSettings.setLayout(new GridLayout(1, 0));

        jPanelGrid.setBorder(new SoftBevelBorder(BevelBorder.LOWERED));
        jPanelGrid.setLayout(new GridLayout(1, 0));

        GroupLayout jPanelGamePlayLayout = new GroupLayout(jPanelGamePlay);
        jPanelGamePlay.setLayout(jPanelGamePlayLayout);
        jPanelGamePlayLayout.setHorizontalGroup(jPanelGamePlayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanelGamePlayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(jPanelGamePlayLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jPanelGrid, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)))
        );
        jPanelGamePlayLayout.setVerticalGroup(jPanelGamePlayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
            .addGroup(jPanelGamePlayLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(jPanelGamePlayLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jPanelGrid, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addGap(10, 10, 10)))
        );

        jMenuGame.setText(bundle.getString("GamePlay.jMenuGame.text")); // NOI18N

        jMenuItemNewGame.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0));
        jMenuItemNewGame.setText(bundle.getString("GamePlay.jMenuItemNewGame.text")); // NOI18N
        jMenuItemNewGame.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemNewGameActionPerformed(evt);
            }
        });
        jMenuGame.add(jMenuItemNewGame);
        jMenuGame.add(jSeparator1);

        buttonGroupGameMode.add(jChkBxMenuItemEasy);
        jChkBxMenuItemEasy.setSelected(set.getMode().equals(EASY));
        jChkBxMenuItemEasy.setText(bundle.getString("GamePlay.jChkBxMenuItemEasy.text")); // NOI18N
        jChkBxMenuItemEasy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jChkBxMenuItemEasyActionPerformed(evt);
            }
        });
        jMenuGame.add(jChkBxMenuItemEasy);

        buttonGroupGameMode.add(jChkBxMenuItemMedium);
        jChkBxMenuItemMedium.setSelected(set.getMode().equals(MEDIUM));
        jChkBxMenuItemMedium.setText(bundle.getString("GamePlay.jChkBxMenuItemMedium.text")); // NOI18N
        jChkBxMenuItemMedium.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jChkBxMenuItemMediumActionPerformed(evt);
            }
        });
        jMenuGame.add(jChkBxMenuItemMedium);

        buttonGroupGameMode.add(jChkBxMenuItemHard);
        jChkBxMenuItemHard.setSelected(set.getMode().equals(HARD));
        jChkBxMenuItemHard.setText(bundle.getString("GamePlay.jChkBxMenuItemHard.text")); // NOI18N
        jChkBxMenuItemHard.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jChkBxMenuItemHardActionPerformed(evt);
            }
        });
        jMenuGame.add(jChkBxMenuItemHard);

        buttonGroupGameMode.add(jChkBxMenuItemCustom);
        jChkBxMenuItemCustom.setSelected(set.getMode().equals(CUSTOM));
        jChkBxMenuItemCustom.setText(bundle.getString("GamePlay.jChkBxMenuItemCustom.text")); // NOI18N
        jChkBxMenuItemCustom.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jChkBxMenuItemCustomActionPerformed(evt);
            }
        });
        jMenuGame.add(jChkBxMenuItemCustom);
        jMenuGame.add(jSeparator2);

        jMenuItemRecords.setText(bundle.getString("GamePlay.jMenuItemRecords.text")); // NOI18N
        jMenuItemRecords.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemRecordsActionPerformed(evt);
            }
        });
        jMenuGame.add(jMenuItemRecords);
        jMenuGame.add(jSeparator3);

        jMenuItemExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, InputEvent.ALT_MASK));
        jMenuItemExit.setText(bundle.getString("GamePlay.jMenuItemExit.text")); // NOI18N
        jMenuItemExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuGame.add(jMenuItemExit);

        jMenuBar.add(jMenuGame);

        jMenuHelp.setText(bundle.getString("GamePlay.jMenuHelp.text")); // NOI18N

        jMenuItemHelp.setText(bundle.getString("GamePlay.jMenuItemHelp.text")); // NOI18N
        jMenuHelp.add(jMenuItemHelp);

        jMenuItemSobre.setText(bundle.getString("GamePlay.jMenuItemSobre.text")); // NOI18N
        jMenuItemSobre.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemSobreActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemSobre);

        jMenuBar.add(jMenuHelp);

        setJMenuBar(jMenuBar);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelSettings, GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jPanelGamePlay, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelSettings, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanelGamePlay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonCancelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        customCancel();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOKActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        customOk();
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jChkBxMenuItemEasyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jChkBxMenuItemEasyActionPerformed
        newGame(EnumMode.EASY);
    }//GEN-LAST:event_jChkBxMenuItemEasyActionPerformed

    private void jChkBxMenuItemMediumActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jChkBxMenuItemMediumActionPerformed
        newGame(EnumMode.MEDIUM);
    }//GEN-LAST:event_jChkBxMenuItemMediumActionPerformed

    private void jChkBxMenuItemHardActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jChkBxMenuItemHardActionPerformed
        newGame(EnumMode.HARD);
    }//GEN-LAST:event_jChkBxMenuItemHardActionPerformed

    private void jChkBxMenuItemCustomActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jChkBxMenuItemCustomActionPerformed
        jSpinnerWidth.setValue(CUSTOM.width);
        jSpinnerHeight.setValue(CUSTOM.height);
        jSpinnerBombs.setValue(CUSTOM.getBombs());
        jDialogCustom.setLocationRelativeTo(null);
        jDialogCustom.setVisible(true);
    }//GEN-LAST:event_jChkBxMenuItemCustomActionPerformed

    private void jMenuItemRecordsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemRecordsActionPerformed
        Records.main();
    }//GEN-LAST:event_jMenuItemRecordsActionPerformed

    private void jMenuItemNewGameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewGameActionPerformed
        newGame();
    }//GEN-LAST:event_jMenuItemNewGameActionPerformed

    private void jDialogCustomWindowClosing(WindowEvent evt) {//GEN-FIRST:event_jDialogCustomWindowClosing
        customCancel();
    }//GEN-LAST:event_jDialogCustomWindowClosing

    private void jMenuItemSobreActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemSobreActionPerformed
        JOptionPane.showMessageDialog(null, "Campo Minado by Vinicius Lima");
    }//GEN-LAST:event_jMenuItemSobreActionPerformed

    private void customKeyPressed(KeyEvent evt) {//GEN-FIRST:event_customKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            customOk();
        }
    }//GEN-LAST:event_customKeyPressed

    /**
     * Cria e exibe a janela principal do jogo
     */
    public static void main() {
        SwingUtilities.invokeLater(() -> {
            new GamePlay().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup buttonGroupGameMode;
    private JButton jButtonCancel;
    private JButton jButtonOK;
    private JCheckBoxMenuItem jChkBxMenuItemCustom;
    private JCheckBoxMenuItem jChkBxMenuItemEasy;
    private JCheckBoxMenuItem jChkBxMenuItemHard;
    private JCheckBoxMenuItem jChkBxMenuItemMedium;
    private JDialog jDialogCustom;
    private JLabel jLabelBombs;
    private JLabel jLabelHeight;
    private JLabel jLabelWidth;
    private JMenuBar jMenuBar;
    private JMenu jMenuGame;
    private JMenu jMenuHelp;
    private JMenuItem jMenuItemExit;
    private JMenuItem jMenuItemHelp;
    private JMenuItem jMenuItemNewGame;
    private JMenuItem jMenuItemRecords;
    private JMenuItem jMenuItemSobre;
    private JPanel jPanelGamePlay;
    private JPanel jPanelGeneral;
    private JPanel jPanelGrid;
    private JPanel jPanelSettings;
    private JPopupMenu.Separator jSeparator1;
    private JPopupMenu.Separator jSeparator2;
    private JPopupMenu.Separator jSeparator3;
    private JSpinner jSpinnerBombs;
    private JSpinner jSpinnerHeight;
    private JSpinner jSpinnerWidth;
    // End of variables declaration//GEN-END:variables

    /**
     * Botão OK clicado na Janela Dialog para tamanho personalizado
     */
    private void customOk() {
        jDialogCustom.dispose();
        CUSTOM.setWidth(parseInt(jSpinnerWidth.getValue().toString()));
        CUSTOM.setHeight(parseInt(jSpinnerHeight.getValue().toString()));
        CUSTOM.setBombs(parseInt(jSpinnerBombs.getValue().toString()));
        set.setMode(CUSTOM);
        newGame();
    }

    /**
     * Botão CANCELAR clicado na Janela Dialog para tamanho personalizado
     */
    private void customCancel() {
        jDialogCustom.dispose();
        jChkBxMenuItemEasy.setSelected(set.getMode().equals(EASY));
        jChkBxMenuItemMedium.setSelected(set.getMode().equals(MEDIUM));
        jChkBxMenuItemHard.setSelected(set.getMode().equals(HARD));
    }

    /**
     * Inicia uma nova partida
     */
    private void newGame() {
        tiles = new Tiles(set.getMode(), jPanelGrid);
        revalidate();
        pack();
    }

    /**
     * Inicia uma nova partida
     *
     * @param mode Modo de Jogo EnumMode
     * @see EnumMode
     */
    private void newGame(EnumMode mode) {
        set.setMode(mode);
        newGame();
    }

    /**
     * Inicia a Thread que ficará em loop atualizando as informações do jogo e
     * interface
     */
    private void refresh() {
        setLocationRelativeTo(null);
        new Thread(() -> {
            while (true) {
                try {
                    Thread.sleep(50);
                    DecimalFormat f = new DecimalFormat("000");
                    SwingUtilities.invokeAndWait(() -> {
                        bombs.set(f.format(tiles.getBombsRest()));
                        time.set(f.format(tiles.getTime()));
                        smile.setIcon(tiles.getSmile());
                        jPanelSettings.revalidate();
                    });
                    if (tiles.isWin()) {
                        set.checkRecord((int) tiles.getTime());
                    }
                } catch (Exception ignore) {
                }
            }
        }).start();
    }
}
